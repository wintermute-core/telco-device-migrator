devices:
  model1:
    input: "input"
  model2:
    input: "input"

services:
  output: "app-output"


mapping:
  logic: |
    package com.swisscom.kratos.service;

    import com.swisscom.kratos.model.*;
    import java.util.Map;

    global java.util.Collection results;

    dialect "mvel"

    rule "device1 mapping"
      when
        deviceConfig: com.swisscom.kratos.model.Device1Config()
      then
        config = deviceConfig.getConfig()
        if (config["param1"] != null) {
            NetworkServiceA ns = new NetworkServiceA();
            ns.serviceId = deviceConfig.deviceId + "_serviceA";
            ns.device = config["deviceId"];
            ns.configuration["paramA1"] = config["param1"];
            results.add(ns);
        }
        if (config["param2"] != null) {
            NetworkServiceB ns2 = new NetworkServiceB();
            ns2.serviceId = deviceConfig.deviceId + "_serviceB";
            ns2.device = config["deviceId"];
            ns2.configuration["configB1"] = config["param1"];
            ns2.configuration["configB2"] = config["param2"];
            results.add(ns2);
        }
    end

    rule "device2 mapping"
      when
        config: com.swisscom.kratos.model.Device2Config()
      then

    end
